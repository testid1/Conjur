name: "Create Conjur JWT Authenticator"
description: "Create/Update a Conjur authn-jwt authenticator via policy (JWT auth + REST upload)"

inputs:
  CONJUR_URL:
    description: "Conjur API base URL (e.g. https://<tenant>.secretsmgr.cyberark.cloud/api)"
    required: true
  CONJUR_ACCOUNT:
    description: "Conjur account name (e.g. conjur)"
    required: true
  SERVICE_ID:
    description: "authn-jwt service ID (e.g. GitMain2)"
    required: true
  AUTHENTICATOR_NAME:
    description: "Full policy id for the authenticator (e.g. conjur/authn-jwt/GitMain2)"
    required: true
  JWT_ISSUER:
    description: "Expected issuer (iss)"
    required: true
  JWKS_URI:
    description: "JWKS endpoint (jwks-uri)"
    required: true
  JWT_IDENTITY_PATH:
    description: "Identity path (e.g. github-apps)"
    required: true
  TOKEN_APP_PROPERTY:
    description: "Optional: claim to map apps (token-app-property)"
    required: false
    default: ""
  POLICY_BRANCH_ID:
    description: "Policy branch to load into (typical for authenticators: 'root')"
    required: false
    default: "root"

runs:
  using: "composite"
  steps:
    - name: Install jq
      shell: bash
      run: |
        set -euo pipefail
        sudo apt-get update -y
        sudo apt-get install -y jq

    - name: Authenticate to Conjur via OIDC (authn-jwt)
      id: auth
      shell: bash
      env:
        CONJUR_URL:     ${{ inputs.CONJUR_URL }}
        CONJUR_ACCOUNT: ${{ inputs.CONJUR_ACCOUNT }}
        SERVICE_ID:     ${{ inputs.SERVICE_ID }}
      run: |
        set -euo pipefail
        echo "==> Mint GitHub OIDC JWT"
        OIDC_JWT=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
                     "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r .value)
        echo "[DEBUG] OIDC JWT length: ${#OIDC_JWT}"

        echo "==> Exchange for base64 Conjur session"
        AUTHN_URL="$CONJUR_URL/authn-jwt/$SERVICE_ID/$CONJUR_ACCOUNT/authenticate"
        SESSION_B64=$(curl -s -k -X POST "$AUTHN_URL" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -H "Accept-Encoding: base64" \
          --data-urlencode "jwt=$OIDC_JWT")
        echo "[DEBUG] Session (base64) bytes: ${#SESSION_B64}"
        test -n "$SESSION_B64" || { echo "::error::Failed to obtain Conjur session"; exit 1; }

        echo "session_b64=$SESSION_B64" >> "$GITHUB_OUTPUT"

    - name: Build authenticator policy file
      shell: bash
      run: |
        set -euo pipefail
        cat > authenticator-policy.yml <<'EOF'
- !policy
  id: __AUTH_NAME__
  body:
    - !webservice
    # Canonical variables for authn-jwt configuration
    - !variable issuer
    - !variable jwks-uri
    - !variable identity-path
    - !variable token-app-property
    - !group apps
    - !permit
      role: !group apps
      privileges: [read, authenticate]
      resource: !webservice
EOF
        sed -i "s|__AUTH_NAME__|${{ inputs.AUTHENTICATOR_NAME }}|g" authenticator-policy.yml
        echo "=== authenticator-policy.yml ==="
        cat authenticator-policy.yml

    - name: Load policy with REST (append to branch)
      shell: bash
      env:
        CONJUR_URL:       ${{ inputs.CONJUR_URL }}
        CONJUR_ACCOUNT:   ${{ inputs.CONJUR_ACCOUNT }}
        POLICY_BRANCH_ID: ${{ inputs.POLICY_BRANCH_ID }}
        SESSION_B64:      ${{ steps.auth.outputs.session_b64 }}
      run: |
        set -euo pipefail
        test -f authenticator-policy.yml || { echo "::error::authenticator-policy.yml missing"; exit 2; }

        TARGET="$CONJUR_URL/policies/$CONJUR_ACCOUNT/policy/$POLICY_BRANCH_ID"
        echo "==> POST $TARGET"
        RESP=$(curl -k -sS \
          -H "Authorization: Token token=\"$SESSION_B64\"" \
          -H "Content-Type: application/x-yaml" \
          -X POST "$TARGET" \
          --data-binary @authenticator-policy.yml \
          -w "\nHTTP_STATUS:%{http_code}")
        BODY=$(echo "$RESP" | sed '$d')
        CODE=$(echo "$RESP" | awk -F: '/HTTP_STATUS/{print $2}')

        echo "--- Response ($CODE) ---"
        echo "$BODY"
        echo "------------------------"

        if [ "${CODE:-0}" -lt 200 ] || [ "${CODE:-0}" -ge 300 ]; then
          case "$CODE" in
            401) echo "::error::401 Unauthorized (JWT mapping or token issue)";;
            403) echo "::error::403 Forbidden (identity lacks UPDATE on branch '$POLICY_BRANCH_ID')";;
            404) echo "::error::404 Not Found (branch missing/hidden or wrong URL/account)";;
            *)   echo "::error::Policy load failed (HTTP $CODE)";;
          esac
          exit 1
        fi

    - name: Next steps (info)
      shell: bash
      run: |
        echo "Set the variable values after policy load, e.g.:"
        echo "  ${{
          inputs.AUTHENTICATOR_NAME
        }}/issuer            = ${{ inputs.JWT_ISSUER }}"
        echo "  ${{
          inputs.AUTHENTICATOR_NAME
        }}/jwks-uri          = ${{ inputs.JWKS_URI }}"
        echo "  ${{
          inputs.AUTHENTICATOR_NAME
        }}/identity-path     = ${{ inputs.JWT_IDENTITY_PATH }}"
        echo "  ${{
          inputs.AUTHENTICATOR_NAME
        }}/token-app-property= ${{ inputs.TOKEN_APP_PROPERTY }}"
